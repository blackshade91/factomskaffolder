**** PROPERTIES SKAFFOLDER ****
{
    "forEachObj": "db",
    "overwrite": false,
    "_partials": [
        {
            "template": `      *
                  * The content of this section will be overwritten on each documentation, 
                  * please insert your customization at the top or at the end of the file.
                  * ------------------------------------
                  */
            
            {{#each db._resources}}{{#notNull _entity}}
            
                /**
                  * ------------------------------------
                  * {{_entity.name}}
                  * ------------------------------------
                  */
                class {{_entity.name}} extends Sequelize.Model{}
                {{_entity.name}}.init({
                    _id: { 
                      type: Sequelize.INTEGER,
                    primaryKey: true,
                    autoIncrement: true
                  },
                  {{#each _entity._attrs}}{{#notEqual name 'roles'}}
                  {{name}}: {{#equal ../name 'User'}}{{/equal}}{
                      type: {{toSequelizeType type}}{{#required}}, 
                    allowNull: false{{/required}}{{#unique}},
                    unique : true, {{/unique}}
                  }{{#equal ../name 'User'}}{{/equal}},
                  {{/notEqual}}{{/each}}
                  //RELATIONS
                  {{#each _entity._relations}}
                    {{#equal _ent1.name ../_entity.name}}{{#equal type '1:m'}}
                  {{name}}:  {
                      type: Sequelize.INTEGER{{#required}}, 
                    allowNull: false{{/required}},
                    references: {
                        model: "{{_ent2.name}}",
                      key: '_id',
                    },
                  }{{/equal}}{{/equal}}
                  {{/each}}
                  
                  
                  //EXTERNAL RELATIONS
                  /*
                  {{#each _entity._relations}}{{#notEqual _ent1.name ../_entity.name}}{{name}}: {
                      type: Sequelize.INTEGER{{#required}}, 
                    allowNull: false{{/required}},
                    references: {
                        model: {{_ent1.name}},
                      key: '_id',
                    }
                  },
                  {{/notEqual}}{{/each}}*/
                },
                  { sequelize, tableName: "{{lowercase _entity.name}}", timestamps: false }
                );
            
            {{/notNull}}{{/each}}
                /**
                  * ------------------------------------
                  * Relations many to many
                  * ------------------------------------
                  */
            {{#each db._resources}}{{#notNull _entity}}
                {{#each _entity._relations}}{{#equal _ent1.name ../_entity.name}}{{#equal type 'm:m'}}
                {{../_entity.name}}.belongsToMany({{_ent2.name}}, {
                      through: "{{_ent1.name}}_{{name}}",
                    as: "{{name}}",
                    foreignKey: "id_{{_ent1.name}}",
                    otherKey: "id_{{_ent2.name}}",
                    timestamps: false
                });
            {{/equal}}{{/equal}}{{/each}}{{/notNull}}{{/each}}
              /**
               * ------------------------------------
              `,
            "tagFrom": "* Start define generated schema",
            "tagTo": "* End define generated schema",
            "name": "Partial Import"
        }
    ]
}
**** END PROPERTIES SKAFFOLDER ****
// Import Sequelize
import Sequelize from "sequelize";
import Database from "../classes/Database_{{capitalize db.name}}";

export default init => {
  let sequelize = Database.getConnection();


    /**
      * ------------------------------------
      * Start define generated schema
      * ------------------------------------
      */

    /**
      * ------------------------------------
      * End define generated schema
      * ------------------------------------
      */

      /**
        * ------------------------------------
        * Factom blockchain entities
        * ------------------------------------
        */

      /**
      * ------------------------------------
      * Chain
      * ------------------------------------
      */
      class Chain extends Sequelize.Model {}
      Chain.init(
        {
          _id: {
            type: Sequelize.INTEGER,
            primaryKey: true,
            autoIncrement: true
          },

          chain_id: {
            type: Sequelize.STRING,
            allowNull: false
          },

          entry_hash: {
            type: Sequelize.STRING
          },

          content: {
            type: Sequelize.STRING
          },

          //RELATIONS

          identity: {
            type: Sequelize.INTEGER,
            references: {
              model: "Identity",
              key: "_id"
            }
          }

          //EXTERNAL RELATIONS
          /*
          */
        },
        { sequelize, tableName: "chain", timestamps: false, modelName: "Chain" }
      );

      /**
      * ------------------------------------
      * Entry
      * ------------------------------------
      */
      class Entry extends Sequelize.Model {}
      Entry.init(
        {
          _id: {
            type: Sequelize.INTEGER,
            primaryKey: true,
            autoIncrement: true
          },

          entry_hash: {
            type: Sequelize.STRING
          },

          content: {
            type: Sequelize.STRING
          },

          //RELATIONS

          chain: {
            type: Sequelize.INTEGER,
            references: {
              model: "Chain",
              key: "_id"
            }
          }
        },
        { sequelize, tableName: "entry", timestamps: false, modelName: "Entry" }
      );

      /**
      * ------------------------------------
      * Identity
      * ------------------------------------
      */
      class Identity extends Sequelize.Model {}
      Identity.init(
        {
          _id: {
            type: Sequelize.INTEGER,
            primaryKey: true,
            autoIncrement: true
          },

          chain_id: {
            type: Sequelize.STRING,
            allowNull: false
          },

          entry_hash: {
            type: Sequelize.STRING,
            allowNull: false
          },

          key_pairs: {
            type: Sequelize.JSON
          }

          //RELATIONS

          //EXTERNAL RELATIONS
          /*
          identity: {
            type: Sequelize.INTEGER,
            references: {
              model: Doctor,
              key: '_id',
            }
          },
          */
        },
        {
          sequelize,
          tableName: "identity",
          timestamps: false,
          modelName: "Identity"
        }
      );

    /**
      * ------------------------------------
      * Roles
      * ------------------------------------
      */
    class Roles extends Sequelize.Model{}
    Roles.init({
      _id: { 
        type: Sequelize.INTEGER,
        primaryKey: true,
        autoIncrement: true
      },
      
      role: {
        type: Sequelize.STRING
      },
      
      //RELATIONS
        
      _user:  {
        type: Sequelize.INTEGER,
        references: {
          model: "User",
          key: '_id',
        },
      }
      
      
      //EXTERNAL RELATIONS
      /*
      */
    },
      { sequelize, tableName: "roles", timestamps: false }
    );

    User.hasMany(Roles, {
      foreignKey: "_user"
    });

    /**
      * ------------------------------------
      * Insert here your custom models
      * ------------------------------------
      */

};
